LINK: https://github.com/t0ffe/CybSec_Course_Project_I
To run the app, we should have Python and Django installed. If not, refer to their respective sites for installation instructions for your platform. In general, if we already have Python, Django should install itself with the following command:.

python3 -m pip install django

Next, clone the repo to our computer. (git or download zip)
After that, navigate to the "mysite" folder and run the following commands:

These make sure the local database is as needed:
python3 manage.py makemigrations
python3 manage.py migrate

This creates an admin user, so we can check the flaws and functionalities:
python3 manage.py createsuperuser

And finally, this starts the server by default at http://127.0.0.1:8000/:
python3 manage.py runserver

Then on your web browser go to http://127.0.0.1:8000/

In mysite/todo/flags.py, we have a safety flag that is by default set to True. Changing it to False changes the code to use the unsafe / flawed versions of the code.


------------------------------------------------
FLAW 1:
https://github.com/t0ffe/CybSec_Course_Project_I/blob/main/mysite/todo/views.py#L50-L68

The first flaw is A03:2021 â€“ Injection
In the code at https://github.com/t0ffe/CybSec_Course_Project_I/blob/main/mysite/todo/views.py#L62-L64 we construct the raw SQL query from the user's input. The input is the todo's title. Then, on the following line, we execute the SQL query. It is not sanitized, so, for example, the following input: "1','0','2'); UPDATE todo_todo SET title='hacked' WHERE 1 = 1; --" changes all tasks' title to 'hacked'. A more malicious input such as "1','0','2'); DROP TABLE todo_todo; --" will drop the table that contains all the todos, rendering the app unusable, as the site is looking for a database table that is no longer there.

We can fix this by sanitizing the users' inputs. This is done by using Django's built-in way of handling the queries. We can see the implementation at https://github.com/t0ffe/CybSec_Course_Project_I/blob/main/mysite/todo/views.py#L43-L47. Here, we use Django's ORM to handle the database entries.

------------------------------------------------
FLAW 2:
https://github.com/t0ffe/CybSec_Course_Project_I/blob/main/mysite/todo/views.py#L108-L117
https://github.com/t0ffe/CybSec_Course_Project_I/blob/main/mysite/todo/views.py#L146-L156

The second flaw is A07:2021-Identification and Authentication Failures.
Firstly, in the code at https://github.com/t0ffe/CybSec_Course_Project_I/blob/main/mysite/todo/views.py#L146-L156 we allow the creation of user accounts with default, weak, or well-known passwords. The code does not check the password in any way and allows any (even empty) passwords. The username and password are then stored in a custom database entry called "UnsafeUser".

We can fix the flaw by not allowing such passwords. On lines https://github.com/t0ffe/CybSec_Course_Project_I/blob/main/mysite/todo/views.py#L141-L144 we use Django's recommended user management convention. We get the username and password via a form that is validated before being accepted. In the validation process, Django checks that the passwords are not too short, too common, default, or consist only of numbers, to name a few checks. The form also has two password fields to ensure the user writes their password correctly.


------------------------------------------------
FLAW 3:
https://github.com/t0ffe/CybSec_Course_Project_I/blob/main/mysite/todo/models.py#L15-L25

The third flaw is A02:2021-Cryptographic Failures.
As discussed above, the users are stored in the UnsafeUser database table. On lines https://github.com/t0ffe/CybSec_Course_Project_I/blob/main/mysite/todo/models.py#L15-L25 is the code for the UnsafeUser model. The username and password are stored as CharField, aka. plaintext. This database table is only used when the "safe" flag is set to False. Because we are now using a different mode to store user information, the login method has also been changed to use this model. https://github.com/t0ffe/CybSec_Course_Project_I/blob/main/mysite/todo/views.py#L108-L117
We can verify that the passwords are not hashed by starting the application, as instructed in the beginning of this report, and going to http://127.0.0.1:8000/admin/todo/unsafeuser/. To get here, we must login using the credentials we created when we ran the command "python3 manage.py createsuperuser". The database entry UnsafeUser is only visible here if the "safe" flag is set to False.

We can fix this by not storing the passwords as plaintext but instead hashing them. Here https://github.com/t0ffe/CybSec_Course_Project_I/blob/main/mysite/todo/views.py#L108-L117 we get the passwords using Django's form and save them in Django's default User table. The passwords in the Default User table are hashed. This table is not present in models.py because we have no need to create it, as it was created by default by Django.
We can verify that the passwords are stored hashed by going to http://127.0.0.1:8000/admin/auth/user/.


------------------------------------------------
FLAW 4:
https://github.com/t0ffe/CybSec_Course_Project_I/blob/main/mysite/todo/views.py#L36

Broken access control
how to fix it...

------------------------------------------------
FLAW 5:
https://github.com/t0ffe/CybSec_Course_Project_I/blob/main/mysite/todo/models.py#L27-L47

Auditable events, such as logins and failed logins are not logged.
how to fix it...
